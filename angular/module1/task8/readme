Практическое задание 25.11.2015.

1. По урлу http://rating.smartjs.academy/rating получить JSON и вывести список игроков. Список должен быть
упорядоченным.
1 место. Игрок. Очки
2 место. Игрок. Очки

Объект фильтруется в контроллере orderBy и передается в ng-repeat.

При апдейте ловить сообщение и обновлять даные списка игроков. ng-repeat track by id - указать, по какому ключу.

!!! В контроллерах нельзя использовать $http и сторонние модули.
Обновление приходит только для поинтов, тогдаперед name можно поставуить :: (one time) и количество watchers
сократится в два раза.


var ws = new WebSocket('ws://rating.smartjs.academy/rating');
ws.addEventListener('message', function (e) {
  console.log(e.data);
});

В Контроллер можно инъектить сервисы

Вначале подписаться на вебсокет!!! Если медленное соединение, может произойти конфликт версий обновления (hardMode). http://rating.smartjs.academy/rating?hardMode
Заводится массив, в нем складываются обновления. Когда приходит REST, все синхронизируется. После этого массив уже не
 нужен.


------------------------------------------------------------


Задание 2. джедаи



------------------------------------------------------------
ПРИМЕР РЕАЛИЗАЦИИ 1.

Реализация async http://habrahabr.ru/post/189084/
http://habrahabr.ru/post/221111/



app.factory('socket', function ($rootScope) {
  var socket = io.connect();
  return {
    on: function (eventName, callback) {
      socket.on(eventName, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      });
    },
    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if (callback) {
            callback.apply(socket, args);
          }
        });
      })
    }
  };
});

function AppCtrl($scope, socket) {
  /* Controller logic */
  socket.on('init', function (data) {
      $scope.name = data.name;
      $scope.users = data.users;
    });

    socket.on('send:message', function (message) {
      $scope.messages.push(message);
    });

    $scope.changeName = function () {
        socket.emit('change:name', {
          name: $scope.newName
        }, function (result) {
          if (!result) {
            alert('There was an error changing your name');
          } else {

            changeName($scope.name, $scope.newName);

            $scope.name = $scope.newName;
            $scope.newName = '';
          }
        });
      };
}



